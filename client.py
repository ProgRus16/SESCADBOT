from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import requests
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8469169912:AAHcbKkHOgLR6HPwvpaEeYUTaN8bmjFOF2o"
SERVER_URL = "http://localhost:8000"

# –°–æ—Å—Ç–æ—è–Ω–∏—è
REGISTER_BUSINESS, BUSINESS_NAME, BUSINESS_DESC, BUSINESS_MEMBERS, BUSINESS_CONTACTS = range(5)
ADVERTISE_BUSINESS, ADVERTISE_KEY, ADVERTISE_TEXT = range(3)
SUPPORT_MESSAGE = range(1)

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å", callback_data="register_business")],
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É", callback_data="find_job")],
        [InlineKeyboardButton("–ü—Ä–æ—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å", callback_data="advertise")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–∏—Ä–∂—É —Ñ—Ä–∏–ª–∞–Ω—Å–∞!", reply_markup=reply_markup)

# --- –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã ---
async def find_job(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        response = requests.get(f"{SERVER_URL}/get_businesses", timeout=5)
        businesses = response.json().get("businesses", [])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        businesses = []

    if not businesses:
        await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
        return

    keyboard = []
    for business in businesses:
        keyboard.append([InlineKeyboardButton(business["name"], callback_data=f"job_detail_{business['name']}")])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", reply_markup=reply_markup)

# --- –ü–æ–º–æ—â—å ---
async def help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º", callback_data="contact_dev")],
        [InlineKeyboardButton("FAQ", callback_data="faq")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–ß–µ–º –ø–æ–º–æ—á—å?", reply_markup=reply_markup)

async def contact_developer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üì© –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:")
    return SUPPORT_MESSAGE

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    faq_text = """
    ‚ùì **FAQ** ‚ùì

    *1. –ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å?*  
    ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å¬ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.  

    *2. –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?*  
    ‚Üí –†–∞–∑–º–µ—â–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞.  

    *3. –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?*  
    ‚Üí –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–º–æ—â—å¬ª ‚Üí ¬´–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º¬ª.  
    """
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="help")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(faq_text, reply_markup=reply_markup, parse_mode="Markdown")

# --- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ---
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å", callback_data="register_business")],
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É", callback_data="find_job")],
        [InlineKeyboardButton("–ü—Ä–æ—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å", callback_data="advertise")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞ ---
async def start_register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞:")
    return REGISTER_BUSINESS

async def register_business(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = update.message.text.strip()
    if key != "TESTKEY123":
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return REGISTER_BUSINESS
    await update.message.reply_text("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:")
    return BUSINESS_NAME

async def business_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("üìù –û–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:")
    return BUSINESS_DESC

async def business_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["desc"] = update.message.text.strip()
    await update.message.reply_text("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    return BUSINESS_MEMBERS

async def business_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["members"] = [m.strip() for m in update.message.text.split(",") if m.strip()]
    await update.message.reply_text("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:")
    return BUSINESS_CONTACTS

async def business_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = {
        "user_id": str(update.message.from_user.id),
        "business_name": context.user_data["name"],
        "description": context.user_data["desc"],
        "members": context.user_data["members"],
        "contacts": update.message.text.strip()
    }
    try:
        resp = requests.post(f"{SERVER_URL}/register_business", json=data, timeout=5)
        if resp.status_code == 200:
            await update.message.reply_text("üéâ –ë–∏–∑–Ω–µ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
    return ConversationHandler.END

# --- –†–µ–∫–ª–∞–º–∞ ---
async def start_advertise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:")
    return ADVERTISE_KEY

async def advertise_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["adv_key"] = update.message.text.strip()
    await update.message.reply_text("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:")
    return ADVERTISE_TEXT

async def advertise_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = {
        "user_id": str(update.message.from_user.id),
        "business_name": "–ú–æ–π –±–∏–∑–Ω–µ—Å",
        "activation_key": context.user_data["adv_key"],
        "advertisement_text": update.message.text.strip()
    }
    try:
        resp = requests.post(f"{SERVER_URL}/advertise", json=data, timeout=5)
        if resp.status_code == 200:
            await update.message.reply_text("‚úÖ –†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.")
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    return ConversationHandler.END

# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ---
async def send_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    user_id = update.message.from_user.id
    try:
        requests.post(f"{SERVER_URL}/send_support_message", json={"user_id": user_id, "message": msg}, timeout=5)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# --- –ì–ª–∞–≤–Ω–∞—è ---
def main():
    app = Application.builder().token(TOKEN).build()

    # 1. –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
    reg_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_register, pattern="^register_business$")],
        states={
            REGISTER_BUSINESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_business)],
            BUSINESS_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, business_name)],
            BUSINESS_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, business_desc)],
            BUSINESS_MEMBERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, business_members)],
            BUSINESS_CONTACTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, business_contacts)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False
    )

    adv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_advertise, pattern="^advertise$")],
        states={
            ADVERTISE_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, advertise_key)],
            ADVERTISE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, advertise_text)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False
    )

    # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏ ‚Äî –ø–µ—Ä–≤—ã–º–∏
    app.add_handler(reg_handler)
    app.add_handler(adv_handler)

    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ callback'–∏
    app.add_handler(CallbackQueryHandler(find_job, pattern="^find_job$"))
    app.add_handler(CallbackQueryHandler(help_menu, pattern="^help$"))
    app.add_handler(CallbackQueryHandler(contact_developer, pattern="^contact_dev$"))
    app.add_handler(CallbackQueryHandler(faq, pattern="^faq$"))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))

    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ–Ω—Ü–µ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, send_support_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()