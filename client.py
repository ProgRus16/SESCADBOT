from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import requests
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8469169912:AAHcbKkHOgLR6HPwvpaEeYUTaN8bmjFOF2o"
SERVER_URL = "http://localhost:8000"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
REGISTER_BUSINESS, BUSINESS_NAME, BUSINESS_DESC, BUSINESS_MEMBERS, BUSINESS_CONTACTS = range(5)
ADVERTISE_BUSINESS, ADVERTISE_KEY, ADVERTISE_TEXT = range(3)
SUPPORT_MESSAGE = range(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å", callback_data="register_business")],
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É", callback_data="find_job")],
        [InlineKeyboardButton("–ü—Ä–æ—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å", callback_data="advertise")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–∏—Ä–∂—É —Ñ—Ä–∏–ª–∞–Ω—Å–∞!", reply_markup=reply_markup)

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "register_business":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞:")
        return REGISTER_BUSINESS
    elif query.data == "find_job":
        await show_jobs(update, context)
    elif query.data == "advertise":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:")
        keyboard = [[InlineKeyboardButton("–ú–æ–π –±–∏–∑–Ω–µ—Å", callback_data="advertise_my_business")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å:", reply_markup=reply_markup)
        return ADVERTISE_BUSINESS
    elif query.data == "help":
        await show_help_menu(update, context)

async def show_jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = requests.get(f"{SERVER_URL}/get_businesses")
    businesses = response.json().get("businesses", [])

    if not businesses:
        await update.callback_query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.")
        return

    keyboard = []
    for business in businesses:
        keyboard.append([InlineKeyboardButton(business["name"], callback_data=f"job_{business['name']}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", reply_markup=reply_markup)

async def show_help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º", callback_data="contact_dev")],
        [InlineKeyboardButton("FAQ", callback_data="faq")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text("–ß–µ–º –ø–æ–º–æ—á—å?", reply_markup=reply_markup)

async def contact_developer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:")
    return SUPPORT_MESSAGE

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    faq_text = """
    ‚ùì **FAQ** ‚ùì

    *1. –ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å?*  
    ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å¬ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.  

    *2. –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?*  
    ‚Üí –†–∞–∑–º–µ—â–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞.  

    *3. –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?*  
    ‚Üí –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–º–æ—â—å¬ª ‚Üí ¬´–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º¬ª.  
    """
    await update.callback_query.edit_message_text(faq_text, parse_mode="Markdown")

async def send_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message = update.message.text
    requests.post(f"{SERVER_URL}/send_support_message", json={"user_id": user_id, "message": message})
    await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!")
    return ConversationHandler.END

async def register_business(update: Update, context: ContextTypes.DEFAULT_TYPE):
    activation_key = update.message.text
    if activation_key != "TESTKEY123":
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return REGISTER_BUSINESS
    await update.message.reply_text("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:")
    return BUSINESS_NAME

async def business_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["business_name"] = update.message.text
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞:")
    return BUSINESS_DESC

async def business_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("üë• –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    return BUSINESS_MEMBERS

async def business_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["members"] = update.message.text.split(",")
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:")
    return BUSINESS_CONTACTS

async def business_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    user_id = update.message.from_user.id

    registration_data = {
        "user_id": str(user_id),
        "business_name": user_data["business_name"],
        "description": user_data["description"],
        "members": user_data["members"],
        "contacts": update.message.text
    }

    response = requests.post(f"{SERVER_URL}/register_business", json=registration_data)
    if response.status_code == 200:
        await update.message.reply_text("üéâ –ë–∏–∑–Ω–µ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return ConversationHandler.END

async def advertise_business(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:")
    return ADVERTISE_KEY

async def advertise_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["activation_key"] = update.message.text
    await update.message.reply_text("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:")
    return ADVERTISE_TEXT

async def advertise_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    advertise_data = {
        "user_id": str(user_id),
        "business_name": "–ú–æ–π –±–∏–∑–Ω–µ—Å",
        "activation_key": context.user_data["activation_key"],
        "advertisement_text": update.message.text
    }
    response = requests.post(f"{SERVER_URL}/advertise", json=advertise_data)
    if response.status_code == 200:
        await update.message.reply_text("‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –±–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    # –°–æ–∑–¥–∞–µ–º Application –≤–º–µ—Å—Ç–æ Updater
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click))

    # ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞
    reg_business_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_click, pattern="^register_business$")],
        states={
            REGISTER_BUSINESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_business)],
            BUSINESS_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, business_name)],
            BUSINESS_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, business_desc)],
            BUSINESS_MEMBERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, business_members)],
            BUSINESS_CONTACTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, business_contacts)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # ConversationHandler –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
    advertise_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(advertise_business, pattern="^advertise_")],
        states={
            ADVERTISE_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, advertise_key)],
            ADVERTISE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, advertise_text)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏
    application.add_handler(reg_business_handler)
    application.add_handler(advertise_handler)
    application.add_handler(CallbackQueryHandler(contact_developer, pattern="^contact_dev$"))
    application.add_handler(CallbackQueryHandler(faq, pattern="^faq$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, send_support_message))

    application.run_polling()

if __name__ == "__main__":
    main()