from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Dict, List, Optional
import uvicorn
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mock –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
businesses_db: Dict[str, Dict] = {}  # {user_id: {business_name: business_data}}
activation_keys_db = {"TESTKEY123": True}  # –∫–ª—é—á: –∞–∫—Ç–∏–≤–µ–Ω –ª–∏
users_db = set()
advertisements = []

# –ú–æ–¥–µ–ª–∏
class BusinessRegistration(BaseModel):
    user_id: str
    business_name: str
    description: str
    members: List[str]
    contacts: str

class AdvertiseRequest(BaseModel):
    user_id: str
    business_name: str
    activation_key: str
    advertisement_text: str

class SupportMessage(BaseModel):
    user_id: str
    message: str


@app.post("/register_business")
def register_business(data: BusinessRegistration):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –∫–ª—é—á—É –≤ –ë–î)
    if data.activation_key not in activation_keys_db or not activation_keys_db[data.activation_key]:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±–∏–∑–Ω–µ—Å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if data.user_id in businesses_db and data.business_name in businesses_db[data.user_id]:
        raise HTTPException(status_code=400, detail="–ë–∏–∑–Ω–µ—Å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if data.user_id not in businesses_db:
        businesses_db[data.user_id] = {}

    businesses_db[data.user_id][data.business_name] = {
        "name": data.business_name,
        "description": data.description,
        "members": data.members,
        "contacts": data.contacts,
        "priority": 0
    }
    users_db.add(data.user_id)

    print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –±–∏–∑–Ω–µ—Å: {data.business_name} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data.user_id})")
    return {"status": "success"}


@app.post("/advertise")
def advertise_business(data: AdvertiseRequest):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    if data.activation_key not in activation_keys_db or not activation_keys_db[data.activation_key]:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∏–∑–Ω–µ—Å
    if data.user_id not in businesses_db or data.business_name not in businesses_db[data.user_id]:
        raise HTTPException(status_code=404, detail="–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    businesses_db[data.user_id][data.business_name]["priority"] += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–ª–∞–º—É (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)
    advertisements.append({
        "business_name": data.business_name,
        "text": data.advertisement_text,
        "user_id": data.user_id
    })

    print(f"üì¢ –†–µ–∫–ª–∞–º–∏—Ä—É–µ—Ç—Å—è: {data.business_name} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {businesses_db[data.user_id][data.business_name]['priority']}")
    return {"status": "–†–µ–∫–ª–∞–º–∞ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞"}


@app.post("/send_support_message")
def send_support_message(data: SupportMessage):
    print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {data.user_id}: {data.message}")
    return {"status": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"}


@app.get("/get_businesses")
def get_businesses():
    all_businesses = []
    for user_businesses in businesses_db.values():
        for business in user_businesses.values():
            all_businesses.append({
                "name": business["name"],
                "description": business["description"],
                "members": business["members"],
                "contacts": business["contacts"],
                "priority": business["priority"]
            })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –≤—ã—à–µ)
    all_businesses.sort(key=lambda x: x["priority"], reverse=True)
    return {"businesses": all_businesses}


# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
@app.get("/debug/businesses")
def debug_businesses():
    return businesses_db


if __name__ == "__main__":
    print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    uvicorn.run(app, host="0.0.0.0", port=8000)